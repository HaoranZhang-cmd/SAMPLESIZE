result<-optim(start_params,loglikelihood,method="BFGS")
print(result)
hessian<-numDeriv::hessian(loglikelihood,result$par)
cov_matrix<-solve(hessian)
output<-list(a1=NULL,b1=NULL,a2=NULL,b2=NULL,cov_matrix=NULL)
output$a1<-result$par[7]
output$b1<-result$par[8]
output$a2<-result$par[9]
output$b2<-result$par[10]
output$cov_matrix<-cov_matrix[7:10,7:10]
return(output)
}
#Box-Cox transformation
#' Box-Cox transformation
#' @param data0 continuous test result of undiseased individuals
#' @param data1 continuous test result of diseased individuals
BoxCox<-function(data0,data1){
loglikelihood<-function(lambda){
data0_transformed<-rep(0,length=length(data0))
for(i in 1:length(data0)){
if(lambda!=0){
data0_transformed[i]<-(data0[i]^lambda-1)/lambda
}
else{
data0_transformed[i]<-log(data0[i])
}
}
mean0<-mean(data0_transformed)
var0<-var(data0_transformed)
result0<-log(sqrt(var0))*(-length(data0))
for(i in 1:length(data0)){
result0<-result0+log(data0[i]^(lambda-1))-(data0_transformed[i]-mean0)^2/(2*var0)
}
data1_transformed<-rep(0,length=length(data1))
for(i in 1:length(data1)){
if(lambda!=0){
data1_transformed[i]<-(data1[i]^lambda-1)/lambda
}
else{
data1_transformed[i]<-log(data1[i])
}
}
mean1<-mean(data1_transformed)
var1<-var(data1_transformed)
result1<-log(sqrt(var1))*(-length(data1))
for(i in 1:length(data1)){
result1<-result1+log(data1[i]^(lambda-1))-(data1_transformed[i]-mean1)^2/(2*var1)
}
return(-result0-result1)
}
start_param<-1
result<-optim(par=start_param,fn=loglikelihood,method="BFGS")
lambda<-result$par
data0_transformed<-rep(0,length=length(data0))
for(i in 1:length(data0)){
if(lambda!=0){
data0_transformed[i]<-(data0[i]^lambda-1)/lambda
}
else{
data0_transformed[i]<-log(data0[i])
}
}
data1_transformed<-rep(0,length=length(data1))
for(i in 1:length(data1)){
if(lambda!=0){
data1_transformed[i]<-(data1[i]^lambda-1)/lambda
}
else{
data1_transformed[i]<-log(data1[i])
}
}
output<-list(lambda=NULL,data0_transformed=NULL,data1_transformed=NULL)
output$lambda<-lambda
output$data0_transformed<-data0_transformed
output$data1_transformed<-data1_transformed
return(output)
}
data1_no<-datax[1:14]
data1_yes<-datay[1:16]
data1_yes
data1_no
data2_no<-datax[15:19]
data2_yes<-datay[17:]
data2_yes<-datay[17:length(datay)]
data2_yes
roctest_continuous_unpaired(data1_no,data1_yes,data2_no,data2_yes)
roctest_continuous_unpaired(data1_no,data1_yes,data2_no,data2_yes,0.05)
roc.continuous(data1_no,data1_yes)
roc.continuous(data2_no,data2_yes)
roc.continuous(c(data1_no,data2_no),c(data1_yes,data2_yes))
data2_no
data2_yes
data2_yes<-data2_yes[6:length(data2_yes)]
roc.continuous(data2_no,data2_yes)
data2_yes<-c(76,1370,543,913,230,data2_yes)
roc.continuous(data2_no,data2_yes)
(mean(data2_yes)-mean(data2_no))/(sqrt(var(data2_yes)*(length(data2_yes)-1)/length(data2_yes))
)
data2_yes
datae_no
data2_no
(mean(data2_yes)-mean(data2_no))/(sqrt(var(data2_yes))
)
(mean(data1_yes)-mean(data1_no))/(sqrt(var(data1_yes)))
datax
datay
roc.continuous(datax,datay)
roc.continuous<-function(data0,data1){
loglikelihood<-function(lambda){
data0_transformed<-rep(0,length=length(data0))
for(i in 1:length(data0)){
if(lambda!=0){
data0_transformed[i]<-(data0[i]^lambda-1)/lambda
}
else{
data0_transformed[i]<-log(data0[i])
}
}
mean0<-mean(data0_transformed)
var0<-var(data0_transformed)*(length(data0-1))/length(data0)
result0<-log(sqrt(var0))*(-length(data0))
for(i in 1:length(data0)){
result0<-result0+log(data0[i]^(lambda-1))-(data0_transformed[i]-mean0)^2/(2*var0)
}
data1_transformed<-rep(0,length=length(data1))
for(i in 1:length(data1)){
if(lambda!=0){
data1_transformed[i]<-(data1[i]^lambda-1)/lambda
}
else{
data1_transformed[i]<-log(data1[i])
}
}
mean1<-mean(data1_transformed)
var1<-var(data1_transformed)*(length(data1)-1)/length(data1)
result1<-log(sqrt(var1))*(-length(data1))
for(i in 1:length(data1)){
result1<-result1+log(data1[i]^(lambda-1))-(data1_transformed[i]-mean1)^2/(2*var1)
}
return(-result0-result1)
}
start_param<-1
result<-nlminb(par=start_param,fn=loglikelihood)
lambda<-result$par
data0_transformed<-rep(0,length=length(data0))
for(i in 1:length(data0)){
if(lambda!=0){
data0_transformed[i]<-(data0[i]^lambda-1)/lambda
}
else{
data0_transformed[i]<-log(data0[i])
}
}
data1_transformed<-rep(0,length=length(data1))
for(i in 1:length(data1)){
if(lambda!=0){
data1_transformed[i]<-(data1[i]^lambda-1)/lambda
}
else{
data1_transformed[i]<-log(data1[i])
}
}
a<-(mean(data1_transformed)-mean(data0_transformed))/sqrt(var(data1_transformed)*(length(data1)-1)/length(data1))
b<-sqrt(var(data0_transformed)*(length(data0)-1)/length(data0))/sqrt(var(data1_transformed)*(length(data1)-1)/length(data1))
var_a<-(length(data0)*(a^2+2)+2*length(data1)*b^2)/(2*length(data0)*length(data1))
var_b<-(length(data0)+length(data1))*b^2/(2*length(data0)*length(data1))
covar_ab<-a*b/(2*length(data1))
area.full<-pnorm(a/sqrt(1+b^2))
#绘制曲线
x<-seq(0,1,length=10000)
y<-rep(0,length=10000)
for(i in 1:10000){
y[i]<-pnorm(a+b*qnorm(x[i]))
}
plot(x,y,type="l",main="Estimation of Smooth ROC Curve",xlab="FPR",ylab="Se",col="purple")
#输出结果
output<-list(lambda=NULL,a=NULL,b=NULL,var_a=NULL,var_b=NULL,covar_ab=NULL,area.full=NULL)
output$lambda<-lambda
output$a<-a
output$b<-b
output$var_a<-var_a
output$var_b<-var_b
output$covar_ab<-covar_ab
output$area.full<-area.full
return(output)
}
roc.continuous(datax,datay)
roc.continuous<-function(data0,data1){
loglikelihood<-function(lambda){
data0_transformed<-rep(0,length=length(data0))
for(i in 1:length(data0)){
if(lambda!=0){
data0_transformed[i]<-(data0[i]^lambda-1)/lambda
}
else{
data0_transformed[i]<-log(data0[i])
}
}
mean0<-mean(data0_transformed)
var0<-var(data0_transformed)*(length(data0-1))/length(data0)
result0<-log(sqrt(var0))*(-length(data0))
for(i in 1:length(data0)){
result0<-result0+log(data0[i]^(lambda-1))-(data0_transformed[i]-mean0)^2/(2*var0)
}
data1_transformed<-rep(0,length=length(data1))
for(i in 1:length(data1)){
if(lambda!=0){
data1_transformed[i]<-(data1[i]^lambda-1)/lambda
}
else{
data1_transformed[i]<-log(data1[i])
}
}
mean1<-mean(data1_transformed)
var1<-var(data1_transformed)*(length(data1)-1)/length(data1)
result1<-log(sqrt(var1))*(-length(data1))
for(i in 1:length(data1)){
result1<-result1+log(data1[i]^(lambda-1))-(data1_transformed[i]-mean1)^2/(2*var1)
}
return(-result0-result1)
}
start_param<-1
result<-nlminb(start_param,loglikelihood)
lambda<-result$par
data0_transformed<-rep(0,length=length(data0))
for(i in 1:length(data0)){
if(lambda!=0){
data0_transformed[i]<-(data0[i]^lambda-1)/lambda
}
else{
data0_transformed[i]<-log(data0[i])
}
}
data1_transformed<-rep(0,length=length(data1))
for(i in 1:length(data1)){
if(lambda!=0){
data1_transformed[i]<-(data1[i]^lambda-1)/lambda
}
else{
data1_transformed[i]<-log(data1[i])
}
}
a<-(mean(data1_transformed)-mean(data0_transformed))/sqrt(var(data1_transformed)*(length(data1)-1)/length(data1))
b<-sqrt(var(data0_transformed)*(length(data0)-1)/length(data0))/sqrt(var(data1_transformed)*(length(data1)-1)/length(data1))
var_a<-(length(data0)*(a^2+2)+2*length(data1)*b^2)/(2*length(data0)*length(data1))
var_b<-(length(data0)+length(data1))*b^2/(2*length(data0)*length(data1))
covar_ab<-a*b/(2*length(data1))
area.full<-pnorm(a/sqrt(1+b^2))
#绘制曲线
x<-seq(0,1,length=10000)
y<-rep(0,length=10000)
for(i in 1:10000){
y[i]<-pnorm(a+b*qnorm(x[i]))
}
plot(x,y,type="l",main="Estimation of Smooth ROC Curve",xlab="FPR",ylab="Se",col="purple")
#输出结果
output<-list(lambda=NULL,a=NULL,b=NULL,var_a=NULL,var_b=NULL,covar_ab=NULL,area.full=NULL)
output$lambda<-lambda
output$a<-a
output$b<-b
output$var_a<-var_a
output$var_b<-var_b
output$covar_ab<-covar_ab
output$area.full<-area.full
return(output)
}
roc.continuous(data0,data1)
roc.continuous(datax,datay)
roc.continuous(data1_no,data1_yes)
roc.continuous(data2_no,data2_yes)
roc.continuous<-function(data0,data1){
loglikelihood<-function(lambda){
data0_transformed<-rep(0,length=length(data0))
for(i in 1:length(data0)){
if(lambda!=0){
data0_transformed[i]<-(data0[i]^lambda-1)/lambda
}
else{
data0_transformed[i]<-log(data0[i])
}
}
mean0<-mean(data0_transformed)
var0<-var(data0_transformed)*(length(data0-1))/length(data0)
result0<-log(sqrt(var0))*(-length(data0))
for(i in 1:length(data0)){
result0<-result0+log(data0[i]^(lambda-1))-(data0_transformed[i]-mean0)^2/(2*var0)
}
data1_transformed<-rep(0,length=length(data1))
for(i in 1:length(data1)){
if(lambda!=0){
data1_transformed[i]<-(data1[i]^lambda-1)/lambda
}
else{
data1_transformed[i]<-log(data1[i])
}
}
mean1<-mean(data1_transformed)
var1<-var(data1_transformed)*(length(data1)-1)/length(data1)
result1<-log(sqrt(var1))*(-length(data1))
for(i in 1:length(data1)){
result1<-result1+log(data1[i]^(lambda-1))-(data1_transformed[i]-mean1)^2/(2*var1)
}
return(-result0-result1)
}
start_param<-1
result<-optim(par=start_param,fn=loglikelihood,method="BFGS")
lambda<-result$par
data0_transformed<-rep(0,length=length(data0))
for(i in 1:length(data0)){
if(lambda!=0){
data0_transformed[i]<-(data0[i]^lambda-1)/lambda
}
else{
data0_transformed[i]<-log(data0[i])
}
}
data1_transformed<-rep(0,length=length(data1))
for(i in 1:length(data1)){
if(lambda!=0){
data1_transformed[i]<-(data1[i]^lambda-1)/lambda
}
else{
data1_transformed[i]<-log(data1[i])
}
}
a<-(mean(data1_transformed)-mean(data0_transformed))/sqrt(var(data1_transformed)*(length(data1)-1)/length(data1))
b<-sqrt(var(data0_transformed)*(length(data0)-1)/length(data0))/sqrt(var(data1_transformed)*(length(data1)-1)/length(data1))
var_a<-(length(data0)*(a^2+2)+2*length(data1)*b^2)/(2*length(data0)*length(data1))
var_b<-(length(data0)+length(data1))*b^2/(2*length(data0)*length(data1))
covar_ab<-a*b/(2*length(data1))
area.full<-pnorm(a/sqrt(1+b^2))
#绘制曲线
x<-seq(0,1,length=10000)
y<-rep(0,length=10000)
for(i in 1:10000){
y[i]<-pnorm(a+b*qnorm(x[i]))
}
plot(x,y,type="l",main="Estimation of Smooth ROC Curve",xlab="FPR",ylab="Se",col="purple")
#输出结果
output<-list(lambda=NULL,a=NULL,b=NULL,var_a=NULL,var_b=NULL,covar_ab=NULL,area.full=NULL)
output$lambda<-lambda
output$a<-a
output$b<-b
output$var_a<-var_a
output$var_b<-var_b
output$covar_ab<-covar_ab
output$area.full<-area.full
return(output)
}
roc.continuous<-function(data0,data1){
loglikelihood<-function(lambda){
data0_transformed<-rep(0,length=length(data0))
for(i in 1:length(data0)){
if(lambda!=0){
data0_transformed[i]<-(data0[i]^lambda-1)/lambda
}
else{
data0_transformed[i]<-log(data0[i])
}
}
mean0<-mean(data0_transformed)
var0<-var(data0_transformed)*(length(data0-1))/length(data0)
result0<-log(sqrt(var0))*(-length(data0))
for(i in 1:length(data0)){
result0<-result0+log(data0[i]^(lambda-1))-(data0_transformed[i]-mean0)^2/(2*var0)
}
data1_transformed<-rep(0,length=length(data1))
for(i in 1:length(data1)){
if(lambda!=0){
data1_transformed[i]<-(data1[i]^lambda-1)/lambda
}
else{
data1_transformed[i]<-log(data1[i])
}
}
mean1<-mean(data1_transformed)
var1<-var(data1_transformed)*(length(data1)-1)/length(data1)
result1<-log(sqrt(var1))*(-length(data1))
for(i in 1:length(data1)){
result1<-result1+log(data1[i]^(lambda-1))-(data1_transformed[i]-mean1)^2/(2*var1)
}
return(-result0-result1)
}
start_param<-10
result<-optim(par=start_param,fn=loglikelihood,method="BFGS")
lambda<-result$par
data0_transformed<-rep(0,length=length(data0))
for(i in 1:length(data0)){
if(lambda!=0){
data0_transformed[i]<-(data0[i]^lambda-1)/lambda
}
else{
data0_transformed[i]<-log(data0[i])
}
}
data1_transformed<-rep(0,length=length(data1))
for(i in 1:length(data1)){
if(lambda!=0){
data1_transformed[i]<-(data1[i]^lambda-1)/lambda
}
else{
data1_transformed[i]<-log(data1[i])
}
}
a<-(mean(data1_transformed)-mean(data0_transformed))/sqrt(var(data1_transformed)*(length(data1)-1)/length(data1))
b<-sqrt(var(data0_transformed)*(length(data0)-1)/length(data0))/sqrt(var(data1_transformed)*(length(data1)-1)/length(data1))
var_a<-(length(data0)*(a^2+2)+2*length(data1)*b^2)/(2*length(data0)*length(data1))
var_b<-(length(data0)+length(data1))*b^2/(2*length(data0)*length(data1))
covar_ab<-a*b/(2*length(data1))
area.full<-pnorm(a/sqrt(1+b^2))
#绘制曲线
x<-seq(0,1,length=10000)
y<-rep(0,length=10000)
for(i in 1:10000){
y[i]<-pnorm(a+b*qnorm(x[i]))
}
plot(x,y,type="l",main="Estimation of Smooth ROC Curve",xlab="FPR",ylab="Se",col="purple")
#输出结果
output<-list(lambda=NULL,a=NULL,b=NULL,var_a=NULL,var_b=NULL,covar_ab=NULL,area.full=NULL)
output$lambda<-lambda
output$a<-a
output$b<-b
output$var_a<-var_a
output$var_b<-var_b
output$covar_ab<-covar_ab
output$area.full<-area.full
return(output)
}
roc.continuous(daata2_no,data2_yes)
roc.continuous(data2_no,data2_yes)
pnorm(2.7378/sqrt(1+1.6307^2))
data1_no
roc.continuous(data1_no,data1_yes)
library(Chapter4)
roc.continuous.emp(data1_no,data1_yes)
roc.continuous.emp(data2_no,data2_yes)
pnorm(0.8443/sqrt(1+0.6275^2))
roc.continuous(data1_no,data1_yes)
roc.continuous(data2_no,data2_yes)
length(data2_yes)
roctest_continuous_unpaired(data1_no,data2_no,data1_yes,data2_yes,0,01)
roctest_continuous_unpaired(data1_no,data2_no,data1_yes,data2_yes,0.01)
data1_no
data1_yes
data2_no
data2_yes
TPRtest_continuous_unpaired<-function(data1_no,data2_no,data1_yes,data2_yes,alpha,e){
a1<-params_estimate_continuous_unpaired(data1_no,data1_yes)$a
b1<-params_estimate_continuous_unpaired(data1_no,data1_yes)$b
a2<-params_estimate_continuous_unpaired(data2_no,data2_yes)$a
b2<-params_estimate_continuous_unpaired(data2_no,data2_yes)$b
var_a1<-params_estimate_continuous_unpaired(data1_no,data1_yes)$var_a
var_b1<-params_estimate_continuous_unpaired(data1_no,data1_yes)$var_b
var_a2<-params_estimate_continuous_unpaired(data2_no,data2_yes)$var_a
var_b2<-params_estimate_continuous_unpaired(data2_no,data2_yes)$var_b
covar_a1b1<-params_estimate_continuous_unpaired(data1_no,data1_yes)$covar_ab
covar_a2b2<-params_estimate_continuous_unpaired(data2_no,data2_yes)$covar_ab
a12<-a1-a2
b12<-b1-b2
var_a12<-var_a1+var_a2
var_b12<-var_b1+var_b2
covar_a12b12<-covar_a1b1+covar_a2b2
D<-a12+b12*qnorm(e)
varD<-var_a12+(qnorm(e))^2*var_b12+2*qnorm(e)*covar_a12b12
Z<-D/sqrt(varD)
print(c("The statistic is",Z))
if(Z>qnorm(alpha/2)&&Z<qnorm(1-alpha/2)){
print("The TPRs are not significantly different")
}
else{
print("The TPRs are significantly different")
}
}
TPRtest_continuous_unpaired(data1_no,data2_no,data1_yes,data2_yes,0.05,0.1)
qnorm(0.5160)-qnorm(0.7414)
TPRtest_continuous_unpaired<-function(data1_no,data2_no,data1_yes,data2_yes,alpha,e){
a1<-params_estimate_continuous_unpaired(data1_no,data1_yes)$a
b1<-params_estimate_continuous_unpaired(data1_no,data1_yes)$b
a2<-params_estimate_continuous_unpaired(data2_no,data2_yes)$a
b2<-params_estimate_continuous_unpaired(data2_no,data2_yes)$b
var_a1<-params_estimate_continuous_unpaired(data1_no,data1_yes)$var_a
var_b1<-params_estimate_continuous_unpaired(data1_no,data1_yes)$var_b
var_a2<-params_estimate_continuous_unpaired(data2_no,data2_yes)$var_a
var_b2<-params_estimate_continuous_unpaired(data2_no,data2_yes)$var_b
covar_a1b1<-params_estimate_continuous_unpaired(data1_no,data1_yes)$covar_ab
covar_a2b2<-params_estimate_continuous_unpaired(data2_no,data2_yes)$covar_ab
a12<-a1-a2
b12<-b1-b2
var_a12<-var_a1+var_a2
var_b12<-var_b1+var_b2
covar_a12b12<-covar_a1b1+covar_a2b2
D<-a12+b12*qnorm(e)
print(D)
varD<-var_a12+(qnorm(e))^2*var_b12+2*qnorm(e)*covar_a12b12
print(var(D))
Z<-D/sqrt(varD)
print(c("The statistic is",Z))
if(Z>qnorm(alpha/2)&&Z<qnorm(1-alpha/2)){
print("The TPRs are not significantly different")
}
else{
print("The TPRs are significantly different")
}
}
TPRtest_continuous_unpaired(data1_no,data2_no,data1_yes,data2_yes,0.05,0.1)
params_estimate(c(380,250,150,190,40),c(10,20,30,140,420))
params_estimate(c(380,250,150,190,40),c(0,20,30,140,420))
params_estimate(c(3800,2500,1500,1900,400),c(100,200,300,1400,4200))
library(Chapter4)
data0<-rnorm(100,0,1)
data1<-rnorm(100,1,1)
roc.continuous(data0,data1)
